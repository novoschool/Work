//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Calculator.Wpf.CalculatorServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CalculatorServiceModel", Namespace="http://schemas.datacontract.org/2004/07/Calculator.Wcf.Models")]
    [System.SerializableAttribute()]
    public partial class CalculatorServiceModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DigitInputModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double XRegisterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double YRegisterField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DigitInputMode {
            get {
                return this.DigitInputModeField;
            }
            set {
                if ((this.DigitInputModeField.Equals(value) != true)) {
                    this.DigitInputModeField = value;
                    this.RaisePropertyChanged("DigitInputMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Operator {
            get {
                return this.OperatorField;
            }
            set {
                if ((object.ReferenceEquals(this.OperatorField, value) != true)) {
                    this.OperatorField = value;
                    this.RaisePropertyChanged("Operator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double XRegister {
            get {
                return this.XRegisterField;
            }
            set {
                if ((this.XRegisterField.Equals(value) != true)) {
                    this.XRegisterField = value;
                    this.RaisePropertyChanged("XRegister");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double YRegister {
            get {
                return this.YRegisterField;
            }
            set {
                if ((this.YRegisterField.Equals(value) != true)) {
                    this.YRegisterField = value;
                    this.RaisePropertyChanged("YRegister");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CalculatorServiceReference.ICalculatorService")]
    public interface ICalculatorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/AddDigit", ReplyAction="http://tempuri.org/ICalculatorService/AddDigitResponse")]
        Calculator.Wpf.CalculatorServiceReference.CalculatorServiceModel AddDigit(Calculator.Wpf.CalculatorServiceReference.CalculatorServiceModel model, int digit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/AddDigit", ReplyAction="http://tempuri.org/ICalculatorService/AddDigitResponse")]
        System.Threading.Tasks.Task<Calculator.Wpf.CalculatorServiceReference.CalculatorServiceModel> AddDigitAsync(Calculator.Wpf.CalculatorServiceReference.CalculatorServiceModel model, int digit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Clear", ReplyAction="http://tempuri.org/ICalculatorService/ClearResponse")]
        Calculator.Wpf.CalculatorServiceReference.CalculatorServiceModel Clear(Calculator.Wpf.CalculatorServiceReference.CalculatorServiceModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Clear", ReplyAction="http://tempuri.org/ICalculatorService/ClearResponse")]
        System.Threading.Tasks.Task<Calculator.Wpf.CalculatorServiceReference.CalculatorServiceModel> ClearAsync(Calculator.Wpf.CalculatorServiceReference.CalculatorServiceModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/InsertOperator", ReplyAction="http://tempuri.org/ICalculatorService/InsertOperatorResponse")]
        Calculator.Wpf.CalculatorServiceReference.CalculatorServiceModel InsertOperator(Calculator.Wpf.CalculatorServiceReference.CalculatorServiceModel model, string opCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/InsertOperator", ReplyAction="http://tempuri.org/ICalculatorService/InsertOperatorResponse")]
        System.Threading.Tasks.Task<Calculator.Wpf.CalculatorServiceReference.CalculatorServiceModel> InsertOperatorAsync(Calculator.Wpf.CalculatorServiceReference.CalculatorServiceModel model, string opCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorServiceChannel : Calculator.Wpf.CalculatorServiceReference.ICalculatorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorServiceClient : System.ServiceModel.ClientBase<Calculator.Wpf.CalculatorServiceReference.ICalculatorService>, Calculator.Wpf.CalculatorServiceReference.ICalculatorService {
        
        public CalculatorServiceClient() {
        }
        
        public CalculatorServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Calculator.Wpf.CalculatorServiceReference.CalculatorServiceModel AddDigit(Calculator.Wpf.CalculatorServiceReference.CalculatorServiceModel model, int digit) {
            return base.Channel.AddDigit(model, digit);
        }
        
        public System.Threading.Tasks.Task<Calculator.Wpf.CalculatorServiceReference.CalculatorServiceModel> AddDigitAsync(Calculator.Wpf.CalculatorServiceReference.CalculatorServiceModel model, int digit) {
            return base.Channel.AddDigitAsync(model, digit);
        }
        
        public Calculator.Wpf.CalculatorServiceReference.CalculatorServiceModel Clear(Calculator.Wpf.CalculatorServiceReference.CalculatorServiceModel model) {
            return base.Channel.Clear(model);
        }
        
        public System.Threading.Tasks.Task<Calculator.Wpf.CalculatorServiceReference.CalculatorServiceModel> ClearAsync(Calculator.Wpf.CalculatorServiceReference.CalculatorServiceModel model) {
            return base.Channel.ClearAsync(model);
        }
        
        public Calculator.Wpf.CalculatorServiceReference.CalculatorServiceModel InsertOperator(Calculator.Wpf.CalculatorServiceReference.CalculatorServiceModel model, string opCode) {
            return base.Channel.InsertOperator(model, opCode);
        }
        
        public System.Threading.Tasks.Task<Calculator.Wpf.CalculatorServiceReference.CalculatorServiceModel> InsertOperatorAsync(Calculator.Wpf.CalculatorServiceReference.CalculatorServiceModel model, string opCode) {
            return base.Channel.InsertOperatorAsync(model, opCode);
        }
    }
}
